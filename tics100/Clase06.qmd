---
title: 'TICS100 - Programación'
subtitle: 'Listas'
author: 'Diego Ramos Á.'
institute: <diego.ramos.a@edu.uai.cl>
format:
    revealjs:
        width: 1050
        height: 700
        theme: [default, custom.scss]
        slide-number: true
        controls: true
        logo: ../img/uai.png
        transition: slide
        callout-appearance: simple
        highlight-style: arrow 
        mermaid-format: svg
        mermaid: 
            theme: neutral
resources:
    - Clase06.pdf

---


# Lista
Con esto terminamos para la primera prueba


## ¿Qué son?

::::{.columns}


:::{.column width="45%"}
Una **lista** es una estructura de datos que sirve para almacenar un conjunto de elementos.

</br>
¿Qué tipo de elementos?

</br>

Pueden ser **números, cadenas de textos, otras listas, etc.**
:::

:::{.column width="55%"}

![](../img/cajonera.png){fig-align="center" width=450 height=550}

:::

::::

## Características

- Como las variables tienen nombre.
- Cada espacio se identifica con un número que comienza en `0` y termina en `n-1`. Es decir, si creamos una lista de largo `n`, el primer elemento es el lugar `0` de la lista y el último `n-1`. 
- El número que identifica la posición en la lista lo llamaremos **índice**.
- Puedes guardar lo que quieras en cada espacio. Números, palabras o frases.

## ¿Para qué sirve?


:::{.fragment .fade-in-then-semi-out}

1. Para ahorrar código teniendo varios valores en una sola variable.
:::

:::{.fragment .fade-in-then-semi-out}

2. Relacionar valores a un concepto en particular por ejemplo, el listado de las notas.
:::
:::{.fragment .fade-in-then-semi-out}

3. Ordenar valores
:::
:::{.fragment .fade-in-then-semi-out}

4. Trabajar con múltiples valores de forma ordenada y dinámica.
:::

## ¿Cómo lo creamos?

Para esto tenemos usamos: `[` `]`


</br>
Por ejemplo:

</br>

:::{.fragment .fade-up}
```{python}
#| echo: true
#| eval: false
#| code-line-numbers: "1-2|4-5|7-8|"

# Aquí creamos una lista vacía
lista = [] 

# Aquí creamos una lista con 5 elementos
lista_2 = [1,2,3,4,5] 

# Aquí creamos una lista de 6 elementos
lista_3 = ["P", "Y", "T", "H", "O", "N"] 

```
:::



## Acceder a un elemento 

Para esto debemos indicar el indice del elemento que queremos extraer.

</br>

Ejemplo:

```{python}
#| echo: true
#| eval: true

# Aquí creamos una lista de 6 elementos
lista_3 = ["P", "Y", "T", "H", "O", "N"] 

# Imprimimos el primer elemento
print("El primer elemento de la lista es:", lista_3[0])
```


## Ejemplos


```{.python}
lista1=["p","y","t","h","o","n"]
print("lista1 posicion 0:", lista1[0])

lista2=["python1"]
print("lista2 posicion 0:",lista2[0])

lista3="python"
print("lista1 posicion 0:",lista3[0])
```

:::{.fragment .fade-left}
```{python}
lista1=["p","y","t","h","o","n"]
print("lista1 posicion 0:", lista1[0])

lista2=["python1"]
print("lista2 posicion 0:",lista2[0])

lista3="python"
print("lista1 posicion 0:",lista3[0])

```
:::

:::{.fragment .fade-up}
Los **string** no son listas, pero “funcionan” como listas
:::

# Ciclos y Listas
Trucos útiles en python

## Mostrar elementos con ciclos

Para mostrar todos los valores aprovechamos la estructura del ciclo for, de tal forma de escribir el código necesario y así recorrer toda la lista.


```{.python}
lista = [45,5,3,"hola","Otra cosa"]

for elemento in lista:
    print(elemento)

```
:::{.fragment .fade-up}
```{python}
lista = [45,5,3,"hola","Otra cosa"]

for elemento in lista:
    print(elemento)

```
:::

:::{.fragment .fade-up}
Esta forma recorre todos los elementos de la lista y permite realizar acciones con cada uno. 
:::


## Formato

El formato para recorrer listas es el siguiente:
```{.python}
for elemento in lista:
    <<acciones>>
```

- `elemento` es una variable que guardará cada elemento de la lista
- `lista` es el nombre de la lista
- `<<acciones>>` es código que se ejecuta para cada elemento de la lista


## Mostrar elementos pero por indice

Otra forma de observar cada valor de la lista es usando el índice como identificador.

```{.python}
lista = [45,5,3,"hola","Otra cosa"]

for i in range (0,len(lista)):
    print(lista[i])
```
:::{.fragment .fade-up}
```{python}
lista = [45,5,3,"hola","Otra cosa"]

for i in range (0,len(lista)):
    print(lista[i])
```
:::

:::{.fragment .fade-up}
Dado que el índice está ordenado y sabemos el largo de la lista, fabricamos el rango en donde la variable i debe moverse.
:::

## Formato

El formato es el siguiente:

```{.python}
for i in range(0, len(lista)):
	<<acciones>>
```
- `i` es una variable que avanza de uno en uno
- `len()` es una función que nos entrega el largo de la lista
- `<<acciones>>` es código que se ejecuta para cada elemento de la lista


## ¿Cómo cambiamos un valor particular dentro de una lista?


Muchas veces necesitamos cambiar un valor específico de una lista. Por ejemplo, una lista de edades con valores negativos:

Para esto usaremos: `nombreLista[indice] = valor`

:::{.fragment .fade-up}
```{python}
#| echo: true
#| eval: true
edades = [18,21,-3,4,5,6] # Aquí creamos una lista con 6 edades

edades[2] = 0 # Aquí asignamos 0 al tercer elemento de la lista

print(edades)
```
:::


# Ejercicio

## Ejercicio 1 {auto-animate=true}

Llene una lista con números enteros y calcule la suma de ellos sin usar métodos.

## Ejercicio 1 {auto-animate=true}

Llene una lista con números enteros y calcule la suma de ellos sin usar métodos.


```{.python}
numeros=[5,7,3]
suma1=numeros[0]+numeros[1]+numeros[2]
print(suma1)
```

```{.python}
suma2=0
for elemLista in numeros:
  suma2=elemLista+suma2
print(suma2)
```

```{.python}
suma3=0
for i in range(0,3):
  suma3=numeros[i]+suma3
print(suma3)
```

:::{.fragment .fade-up .callout-tip}
**Importante:** Si la lista tiene valores con texto, no podrá sumarlos. 
Ejemplo: lista = [1,2,4, “Hola”]

:::

## Ejercicio 2 {auto-animate=true}

Dada una lista con números enteros calcule, cuántos números pares hay en la misma


## Ejercicio 2 {auto-animate=true}

Dada una lista con números enteros calcule, cuántos números pares hay en la misma

```{.python}
lista = [3,56,5,38,2,3,765]
cont=0
for element in lista:
    if (element % 2 == 0):
        cont = cont + 1
print("no. de pares es", cont)
```

```{.python}
lista = [3,56,5,38,2,3,765]
cont=0
for i in range (0,len(lista)):
    if (lista [i] % 2 == 0):
        cont = cont + 1
print("no. de pares es", cont)
```

## Resumen

Una lista es una estructura de datos que sirve para almacenar un conjunto de elementos.

**¿Qué tipo de elementos?**

- Pueden ser números, cadenas de textos, otras listas, etc.


Esta estructura de datos tiene sus propios métodos y funciones que nos permitan manipularlas en forma sencilla. 


# Métodos y Funciones de las listas


## `append()`
Agrega un elemento al final de la lista.

</br>

```{python}
#| echo: true
#| eval: true

lista = [1, 2, 3]

# Agregar el valor 4 al final de la lista
lista.append(4)

print(lista) 
```


## `extend()`
Agrega los elementos de otra lista al final de la lista actual.

</br>

```{python}
#| echo: true
#| eval: true

lista1 = [1, 2, 3]
lista2 = [4, 5, 6]

# extiende la lista1 con la lista2
lista1.extend(lista2)

print(lista1) 
```

## `insert(pos, elemento)`
Inserta un elemento en una posición específica de la lista.

</br>

```{python}
#| echo: true
#| eval: true

lista = [1, 2, 3]

# inseta en la lista, en la posicion 1, el valor 4
lista.insert(1, 4)

print(lista) 
```


## `remove()`
Elimina el primer elemento de la lista que coincide con el valor dado.

</br>


```{python}
#| echo: true
#| eval: true

lista = [1, 2, 3, 4, 2]

# elimina de la lista el valor 2
lista.remove(2)
print(lista) 
```



## `pop()` 

Elimina y devuelve el elemento de una posición específica de la lista. Si se entrega sin parámetro, se borra el elemento de la última posición.

</br>

```{python}
#| echo: true
#| eval: true
lista = [1, 2, 3, 4]

# Extrae el elemento en la posicion 2 de la lista
# En este caso lo almacenaremos en una variable
elemento_borrado = lista.pop(2)

print(lista)
print(elemento_borrado) 
```

## `index()` 
Devuelve el índice del primer elemento de la lista que coincide con un valor dado.

</br>


```{python}
#| echo: true
#| eval: true
lista = [1, 2, 3, 4]

# Entrega el valor en la posicion 2 de la lista
indice = lista.index(2)

print(indice) 
```


## `count()`
Devuelve el número de veces que un elemento aparece en la lista.

</br>

```{python}
#| echo: true
#| eval: true
lista = [1, 2, 3, 4, 2]

# Cuenta la cantidad de veces que aparece el valor 2
contador = lista.count(2)
print(contador) 
```


## `sort()`
Ordena los elementos de la lista de forma ascendente.

</br>


```{python}
#| echo: true
#| eval: true
lista = [3, 1, 4, 2]

# ordena los valores de menor a mayor
lista.sort()
print(lista) 

```

## `reverse()`
Invierte el orden de los elementos de la lista.

</br>


```{python}
#| echo: true
#| eval: true
lista = [3, 1, 4, 2]

# Invierte las posiciones de la lista
lista.reverse()

print(lista) 
```

## `len()`
Devuelve la longitud de la lista.

</br>

```{python}
#| echo: true
#| eval: true

lista = [1, 2, 3, 4]

# largo de la lista
longitud = len(lista)
print(longitud) 

```

## `max()`
Devuelve el valor máximo de la lista.

</br>

```{python}
#| echo: true
#| eval: true

lista = [1, 2, 3, 4]

# maximo valor de la lista
maximo = max(lista)
print(maximo) 

```


## `min()`
Devuelve el valor mínimo de la lista.

</br>


```{python}
#| echo: true
#| eval: true
lista = [1, 2, 3, 4]

# minimo valor de la lista
minimo = min(lista)
print(minimo) 

```


## `sum()`
Devuelve la suma de todos los elementos de la lista.

</br>


```{python}
#| echo: true
#| eval: true

lista = [1, 2, 3, 4]

# suma todos lo elementos de la lista
suma = sum(lista)
print(suma) 
```



## `any()`
Devuelve True si al menos uno de los elementos de la lista es verdadero.

</br>


```{python}
#| echo: true
#| eval: true

lista = [True, False, False]

# Si lista tiene valor true: entonces true
resultado = any(lista)
print(resultado) 
```

## `all()`
Devuelve True si todos los elementos de la lista son verdaderos.

</br>

```{python}
#| echo: true
#| eval: true

lista = [True, False, False]

# Entrega true si todos los elemenos son true
resultado = all(lista)
print(resultado) 

```


## Ejercicios {auto-animate="true"}


Dada una listado de la altura de 15 jugadores de basquetbol ingresados a una lista de forma aleatoria, si los que miden menos de 1,8 mt son chicos, entre 1,8 y 2,0 son medianos y más de 2,0 son grandes. Calcule cuántos hay de cada porte. 


## Ejercicios {auto-animate="true" .smaller}

:::: {.columns}

::: {.column width="50%"}
Dada una listado de la altura de 15 jugadores de basquetbol ingresados a una lista de forma aleatoria, si los que miden menos de 1,8 mt son chicos, entre 1,8 y 2,0 son medianos y más de 2,0 son grandes. Calcule cuántos hay de cada porte. 
:::

::: {.column width="50%"}
```{python}
#| echo: true
#| eval: false
import random
listado = []
for i in range(0,15):
    listado.append(random.randint(15,25)/10)

cta_altos = 0
cta_medios = 0
cta_bajos = 0
for elemento in listado:
    if elemento < 1.8:
        cta_bajos +=1
    else:
        if elemento >= 1.8 and elemento <= 2.0:
            cta_medios += 1
        else:
            cta_altos += 1

for elemento in listado:
    print(elemento)

print("La cantidad de bajos es: ", cta_bajos)
print("La cantidad de medios es: ", cta_medios)
print("La cantidad de altos es: ", cta_altos)
```
:::
::::