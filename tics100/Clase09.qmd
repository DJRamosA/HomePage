<!-- ---
title: 'TICS100 - Programación'
subtitle: 'Ciclos Anidados'
author: 'Diego Ramos Á.'
institute: <diego.ramos.a@edu.uai.cl>
format:
    revealjs:
        width: 1050
        height: 700
        theme: [default, custom.scss]
        slide-number: true
        controls: true
        logo: ../img/uai.png
        transition: slide
        callout-appearance: simple
        highlight-style: arrow 
        mermaid-format: svg
        mermaid: 
            theme: neutral
resources:
    - Clase09.pdf

---

# Programación clase 09 
materia para la 2da prueba


# Repaso de Ciclos

## ¿Qué son?

Los ciclos (bucles) permiten ejecutar un bloque de código **repetidamente** mientras se cumpla una cierta **condición**. 

Esto es muy útil para automatizar tareas que deben realizarse varias veces.

## Tipos de Ciclos

Tenemos 2 estructuras principales para esto:

:::: {.columns}

::: {.column width="50%"}
`for`

Cuando sabemos de antemano la cantidad de repeticiones.
:::

::: {.column width="50%"}
`while`

Cuando queremos que siga o pare dada una condición.
:::
::::

# Ciclo `for`
Iteraciones definidas

## Cantidad de repeticiones
¿Cómo definimos cuantas veces se repite nuestro ciclo?

Definimos una función llamada `range()`.

Esta función entrega una **secuencia de numeros**.

Esta función recibe 3 parametros:

- Inicio: Número en el que partimos.
- Final: Número que terminamos (no lo incluye).
- Step: Cuanto saltamos entre números, si no se define su valor es 1.



# Ciclo `while`
Iteraciones por condición


## Cantidad de repeticiones
El ciclo `while` se utiliza cuando se quiere ejecutar **mientras se cumpla una condición** específica.


- Inicia con el `while` y sigue con la condición para continuar.

- En un momento se tiene que terminar la condición para que salga del ciclo.

- El statement `break` nos permite romper un ciclo en cualquier momento.

# Ciclos Anidados

## ¿Qué son? {auto-animate=true}


::::{.columns}

:::{.column width="30%"}
![](../img/reloj.png){fig-align="center"}
:::

:::{.column width="70%"}
Los ciclos anidados consisten en colocar un ciclo dentro de otro ciclo. Es decir, existe un ciclo interno y otro externo

Esto es útil cuando queremos realizar tareas repetitivas en múltiples niveles de iteración.

Pueden imaginárselo como un reloj. La manecilla de las horas avanza uno cuando la manecilla de los minutos cumple todo su ciclo.
:::
::::

## ¿Qué son? {visibility="uncounted" auto-animate=true}

::::{.columns}

:::{.column width="30%"}
![](../img/reloj.png){fig-align="center"}
:::

:::{.column width="70%"}
La manecilla de las horas sería el ciclo externo.

La manecilla de los minutos sería el ciclo interno.

Una vez que el ciclo interno cumple todas sus iteraciones, el ciclo externo avanza uno.

:::
::::

## ¿Cómo sería programarlo?

</br>

```{python}
#| echo: true
#| eval: false
#| code-line-numbers: "1|2|"

for i in range(1, 3+1):  
    for j in range(1, 5+1):   
        print("i:", i, "    j:", j)
    print()
```

:::{.fragment .fade-up}
¿Cuántas veces se ejecutará todas las lineas?
:::


# Lo más importante es tomar una pausa antes de seguir

## Definiciones

**Ciclos anidados**

:::{.fragment .fade-up}

- **Ciclo Externo**: Es el ciclo “inicial”, el primero que comienza a ejecutarse.
:::

:::{.fragment .fade-up}

- **Ciclo Interno**: Es el ciclo que se encuentra dentro de otro ciclo. Se ejecuta PARA CADA UNA de las iteraciones del ciclo externo.
:::

## Ejemplo

</br> 
Si les pregunto que muestra el cdigo:

```{python}
#| echo: true
#| eval: false

i=1
while(i<5):
    j=1
    while(j<5):
        print(i,",",j)
        j=j+1
    i=i+1

```

:::{.fragment .fade-left}
Analicemos con calma: ¿Cual es el ciclo interno? ¿Cual es el ciclo externo?
:::

:::{.fragment .fade-left}
A la pizarra...
:::

## Respuesta

:::{.fragment .fade-up}
```{python}
#| echo: true
#| eval: true

i=1
while(i<5):
    j=1
    while(j<5):
        print(i,",",j)
        j=j+1
    i=i+1

```

:::

## Otro ejemplo

¿Qué mostraría el siguiente código?

```{python}
#| echo: true
#| eval: false
i=1
while(i<5):
    j=1
    while(j<=i):
        print(i,",",j)
        j=j+1
    i=i+1
```

:::{.fragment .fade-up}
```{python}
#| echo: false
#| eval: true
i=1
while(i<5):
    j=1
    while(j<=i):
        print(i,",",j)
        j=j+1
    i=i+1
```

:::


# ¿Para qué usamos ciclos anidados? 

## Usos 

**For fun**: podemos hacer figuras básicas en dos dimensiones. En este caso el despliegue visual tiene forma de matriz (el ciclo externo se hace cargo de cada fila y el ciclo interno de las columnas).


![](../img/ciclos_anidados_4_fun.png)



## Usos {visibility="uncounted"}

Hay una función iterativa (por ejemplo, una sumatoria, un factorial, una multiplicatoria) dentro de otra función iterativa. Por ejemplo, aproximar integrales complejas.

![](../img/ciclos_anidados_integral.png){.center width="780" height="280"}



## Usos {visibility="uncounted"}

Pero la más importante es en el uso de matrices, como por ejemplo las imágenes!!!


![](../img/sede_uai.png){.absolute top=200 left=50 width="450" height="300"}

![](../img/sede_uai_noise.png){.absolute top=200 left=550 width="450" height="300"}



# Ejercicios

## Ejercicio 1

¿Qué aparece en pantalla al ejecutar este programa con datos 3 y 4? ¿y con datos 5 y 3?

```{python}
#| echo: true
#| eval: false
alto=int(input("Alto del rectangulo:"))
ancho=int(input("Ancho del rectangulo:"))
for i in range(1, alto+1):
    for j in range(1, ancho+1):
        print("#", end="")
    print(" ")
```

## Ejercicio 2 

Escribe un programa en Python que te permita generar la mitad derecha de un triángulo. El usuario ingresa el alto. Por ejemplo:

![](../img/ciclos_anidados_4_fun.png){width="600" height="350"}


## Ejercicio 3

::::{.columns}

:::{.column width="75%"}
Escribe un programa en Python que despliegue el avance de los primeros 3 minutos de un cronómetro minutero. Es decir, que aparezca en pantalla (no es necesario que aparezca el 0 antes de los primeros 9 segundos de cada minuto):

:::

:::{.column width="25%"}
![](../img/cronometro.png){width="90" height="600"}
:::

::::
 -->
